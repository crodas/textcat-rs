/// This file is automatically generated by `embed`. Any changes made here will be
/// lost forever.
///
/// Take a look at the `embed` directory for instructions on how to add improvements
/// or how to add a new language
use crate::storage::FileContent;
use std::str::FromStr;

pub enum Language {
    {% for lang in languages %}
        {{lang|capitalize}},{% endfor %}
}

impl FromStr for Language {
    type Err = String;

    fn from_str(name: &str) -> Result<Language, String> {
        match name.to_lowercase().as_str() {
        {% for lang in languages %}
            "{{lang}}" => Ok(Self::{{lang|capitalize}}),{% endfor %}
        _ => Err("Invalid argument".to_string()),
        }
    }
}

pub struct TextCat {
    built_in: FileContent,
}

#[allow(clippy::new_without_default)]
impl TextCat {
    pub fn new() -> Self {
        TextCat {
            built_in: Self::get_embed_languages(),
        }
    }
    
    pub fn get_language(&self, sample: &str) -> Option<Language> {
        self.built_in
            .get_category(sample)
            .map(|r| Language::from_str(r.as_str()).unwrap())
    }

    pub fn get_languages(&self, sample: &str) -> Option<Vec<(Language, u64)>> {
        Some(self.built_in
            .get_categories(sample)?
            .iter()
            .map(|r| (Language::from_str(&r.0).unwrap(), r.1))
            .collect()
        )
    }

    pub fn get_embed_languages() -> FileContent {
        FileContent::from_vec(vec![
        {% for c in ngrams %}
            (
                "{{c.0}}",
                vec![
                {% for ngram in c.1|slice(end=400) %}
                    "{{ngram}}",{% endfor %}
                ]
            ),{% endfor %}
        ]
        )
    }
}
